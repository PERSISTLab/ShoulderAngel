#include "macros.h"
/* CTL0 */
/* TODO: BITS 15 to 8 */
//LH stands for low and high. Is ADC0-7 and 24-31
#define ADC_LH_SAMPLE_TIME_CLEAR()          ADC12CTL0 &= ~ADC12SHT0_15;
#define ADC_LH_SAMPLE_TIME_SET_TO_4()       ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_0;
#define ADC_LH_SAMPLE_TIME_SET_TO_8()       ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_1;
#define ADC_LH_SAMPLE_TIME_SET_TO_16()      ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_2;
#define ADC_LH_SAMPLE_TIME_SET_TO_32()      ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_3;
#define ADC_LH_SAMPLE_TIME_SET_TO_64()      ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_4;
#define ADC_LH_SAMPLE_TIME_SET_TO_96()      ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_5;
#define ADC_LH_SAMPLE_TIME_SET_TO_128()     ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_6;
#define ADC_LH_SAMPLE_TIME_SET_TO_192()     ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_7;
#define ADC_LH_SAMPLE_TIME_SET_TO_256()     ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_8;
#define ADC_LH_SAMPLE_TIME_SET_TO_384()     ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_9;
#define ADC_LH_SAMPLE_TIME_SET_TO_512()     ADC_LH_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT0_10;
//M stands for middle. Is ADC 8-23
#define ADC_M_SAMPLE_TIME_CLEAR()          ADC12CTL0 &= ~ADC12SHT1_15;
#define ADC_M_SAMPLE_TIME_SET_TO_4()       ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_0;
#define ADC_M_SAMPLE_TIME_SET_TO_8()       ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_1;
#define ADC_M_SAMPLE_TIME_SET_TO_16()      ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_2;
#define ADC_M_SAMPLE_TIME_SET_TO_32()      ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_3;
#define ADC_M_SAMPLE_TIME_SET_TO_64()      ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_4;
#define ADC_M_SAMPLE_TIME_SET_TO_96()      ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_5;
#define ADC_M_SAMPLE_TIME_SET_TO_128()     ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_6;
#define ADC_M_SAMPLE_TIME_SET_TO_192()     ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_7;
#define ADC_M_SAMPLE_TIME_SET_TO_256()     ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_8;
#define ADC_M_SAMPLE_TIME_SET_TO_384()     ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_9;
#define ADC_M_SAMPLE_TIME_SET_TO_512()     ADC_M_SAMPLE_TIME_CLEAR();ADC12CTL0|=ADC12SHT1_10;
// For changing all ADC (and naming conventions)
#define ADC_SAMPLE_TIME_SET_TO_4() \
    ADC_LH_SAMPLE_TIME_SET_TO_4(; ADC_M_SAMPLE_TIME_SET_TO_4();
#define ADC_SAMPLE_TIME_SET_TO_8() \
    ADC_LH_SAMPLE_TIME_SET_TO_8();      ADC_M_SAMPLE_TIME_SET_TO_8();
#define ADC_SAMPLE_TIME_SET_TO_16() \
    ADC_LH_SAMPLE_TIME_SET_TO_16();     ADC_M_SAMPLE_TIME_SET_TO_16();
#define ADC_SAMPLE_TIME_SET_TO_32() \
    ADC_LH_SAMPLE_TIME_SET_TO_32();     ADC_M_SAMPLE_TIME_SET_TO_32();
#define ADC_SAMPLE_TIME_SET_TO_64() \
    ADC_LH_SAMPLE_TIME_SET_TO_64();     ADC_M_SAMPLE_TIME_SET_TO_64();
#define ADC_SAMPLE_TIME_SET_TO_96() \
    ADC_LH_SAMPLE_TIME_SET_TO_96();     ADC_M_SAMPLE_TIME_SET_TO_96();
#define ADC_SAMPLE_TIME_SET_TO_128() \
    ADC_LH_SAMPLE_TIME_SET_TO_128();    ADC_M_SAMPLE_TIME_SET_TO_128();
#define ADC_SAMPLE_TIME_SET_TO_192() \
    ADC_LH_SAMPLE_TIME_SET_TO_192();    ADC_M_SAMPLE_TIME_SET_TO_192();
#define ADC_SAMPLE_TIME_SET_TO_256() \
    ADC_LH_SAMPLE_TIME_SET_TO_256();    ADC_M_SAMPLE_TIME_SET_TO_256();
#define ADC_SAMPLE_TIME_SET_TO_384() \
    ADC_LH_SAMPLE_TIME_SET_TO_384();    ADC_M_SAMPLE_TIME_SET_TO_384();
#define ADC_SAMPLE_TIME_SET_TO_512() \
    ADC_LH_SAMPLE_TIME_SET_TO_512();    ADC_M_SAMPLE_TIME_SET_TO_512();

#define ADC_REQUIRE_EVERY_RISING_EDGE()     ADC12CTL0 &=~ADC12MSC;
#define ADC_REQUIRE_FIRST_RISING_EDGE()     ADC12CTL0 |= ADC12MSC;
#define ADC_TURN_OFF()                      ADC12CTL0 &=~ADC12ON;
#define ADC_TURN_ON()                       ADC12CTL0 |= ADC12ON;
#define ADC_CONVERSION_DISABLE()            ADC12CTL0 &=~ADC12ENC;
#define ADC_CONVERSION_ENABLE()             ADC12CTL0 |= ADC12ENC;
#define ADC_CONVERSION_START()              ADC12CTL0 &=~ADC12SC;
#define ADC_CONVERSION_NO_START()           ADC12CTL0 |= ADC12SC;

#define ADC_PERFORM_CONVERSION()            ADC12CTL0 |= ADC12ENC | ADC12SC;


/* CTL1 */
/* TODO: BITS 12-10/8/4-1 */
#define ADC_PREDIV_CLEAR()      ADC12CTL1 &=~INFIX(ADC, ADC_RES_, PDIV_3;
#define ADC_PREDIV_SET_TO_1()   ADC_PREDIV_CLEAR(); ADC12CTL1 |= ADC12PDIV__1;
#define ADC_PREDIV_SET_TO_4()   ADC_PREDIV_CLEAR(); ADC12CTL1 |= ADC12PDIV__4;
#define ADC_PREDIV_SET_TO_32()  ADC_PREDIV_CLEAR(); ADC12CTL1 |= ADC12PDIV__32;
#define ADC_PREDIV_SET_TO_64()  ADC_PREDIV_CLEAR(); ADC12CTL1 |= ADC12PDIV__64;

#define ADC_SAMPCON_SOURCE_IS_SAMPLE_INPUT_SIGNAL() ADC12CTL1 &=~ADC12SHP;
#define ADC_SAMPCON_SOURCE_IS_SAMPLING_TIMER()      ADC12CTL1 |= ADC12SHP;

#define ADC_DIV_CLEAR()         ADC12CTL1 &=~ADC12DIV_7;
#define ADC_DIV_BY_1()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_0;
#define ADC_DIV_BY_2()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_1;
#define ADC_DIV_BY_3()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_2;
#define ADC_DIV_BY_4()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_3;
#define ADC_DIV_BY_5()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_4;
#define ADC_DIV_BY_6()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_5;
#define ADC_DIV_BY_7()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_6;
#define ADC_DIV_BY_8()          ADC_DIV_CLEAR(); ADC12CTL1 |= ADC12DIV_7;

#define ADC_IS_BUSY()     ( ADC12CTL1 & ADC12BUSY )
#define ADC_IS_NOT_BUSY()     ( ! ADC_IS_BUSY() )


/* CTL2 */
/* TODO: BITS 9-8/2-0 */
#define ADC_RES_CLEAR()             ADC12CTL2 &= ~ADC12RES_3;
#define ADC_RES_SET_TO_8_BITS()     ADC_RES_CLEAR(); ADC12CTL2 |= ADC12RES__8BIT;
#define ADC_RES_SET_TO_10_BITS()    ADC_RES_CLEAR(); ADC12CTL2 |= ADC12RES__10BIT;
#define ADC_RES_SET_TO_12_BITS()    ADC_RES_CLEAR(); ADC12CTL2 |= ADC12RES__12BIT;

#define ADC_DATA_IS_UNSIGNED()      ADC12CTL2 &= ~ADC12DF;
#define ADC_DATA_IS_SIGNED()        ADC12CTL2 |= ADC12DF;

/* MCTL0 */
/* TODO: all bits other than INCHx */
/* TODO: Make work for all MCTLx */
#define ADC_MCTL0_SEL_CLEAR()   ADC12MCTL0 &=~ADC12INCH_31;
#define ADC_MCTL0_SEL_A0()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_0;
#define ADC_MCTL0_SEL_A1()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_1;
#define ADC_MCTL0_SEL_A2()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_2;
#define ADC_MCTL0_SEL_A3()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_3;
#define ADC_MCTL0_SEL_A4()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_4;
#define ADC_MCTL0_SEL_A5()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_5;
#define ADC_MCTL0_SEL_A6()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_6;
#define ADC_MCTL0_SEL_A7()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_7;
#define ADC_MCTL0_SEL_A8()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_8;
#define ADC_MCTL0_SEL_A9()  ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_9;
#define ADC_MCTL0_SEL_A10() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_10;
#define ADC_MCTL0_SEL_A11() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_11;
#define ADC_MCTL0_SEL_A12() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_12;
#define ADC_MCTL0_SEL_A13() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_13;
#define ADC_MCTL0_SEL_A14() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_14;
#define ADC_MCTL0_SEL_A15() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_15;

#define ADC_MCTL0_SEL_A16() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_16;
#define ADC_MCTL0_SEL_A17() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_17;
#define ADC_MCTL0_SEL_A18() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_18;
#define ADC_MCTL0_SEL_A19() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_19;
#define ADC_MCTL0_SEL_A20() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_20;
#define ADC_MCTL0_SEL_A21() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_21;
#define ADC_MCTL0_SEL_A22() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_22;
#define ADC_MCTL0_SEL_A23() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_23;
#define ADC_MCTL0_SEL_A24() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_24;
#define ADC_MCTL0_SEL_A25() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_25;
#define ADC_MCTL0_SEL_A26() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_26;
#define ADC_MCTL0_SEL_A27() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_27;
#define ADC_MCTL0_SEL_A28() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_28;
#define ADC_MCTL0_SEL_A29() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_29;
#define ADC_MCTL0_SEL_A30() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_30;
#define ADC_MCTL0_SEL_A31() ADC_MCTL0_SEL_CLEAR(); ADC12MCTL0|= ADC12INCH_31;

/* HI */
#define ADC_THRESHOLD_UPPER_SET(x)   ADC12HI = ( x );

/* LO */
#define ADC_THRESHOLD_LOWER_SET(x)    ADC12LO = ( x );

/* IE */
// TODO: bits 5, 4, 1, 0
#define ADC_THRESHOLD_UPPER_INT_DISABLE()     ADC12IE &=~ADC12HIIE;
#define ADC_THRESHOLD_UPPER_INT_ENABLE()      ADC12IE |= ADC12HIIE;
#define ADC_THRESHOLD_LOWER_INT_DISABLE()     ADC12IE &=~ADC12LOIE;
#define ADC_THRESHOLD_LOWER_INT_ENABLE()      ADC12IE |= ADC12LOIE;

/* IE */
// TODO: bits 5, 4, 1, 0
#define ADC_THRESHOLD_UPPER_INT_CLEAR()         ADC12IFG &=~ADC12HIIFG;
#define ADC_THRESHOLD_UPPER_INT_SET()           ADC12IFG |= ADC12HIIFG;
#define ADC_THRESHOLD_UPPER_INT_IS_SET()        ( ADC12IFG & ADC12HIIFG )
#define ADC_THRESHOLD_UPPER_INT_IS_NOT_SET()    ( ! ADC_THRESHOLD_UPPER_INT_IS_SET() )
#define ADC_THRESHOLD_LOWER_INT_CLEAR()         ADC12IFG &=~ADC12LOIFG;
#define ADC_THRESHOLD_LOWER_INT_SET()           ADC12IFG |= ADC12LOIFG;
#define ADC_THRESHOLD_LOWER_INT_IS_SET()        ( ADC12IFG & ADC12LOIFG )
#define ADC_THRESHOLD_LOWER_INT_IS_NOT_SET()    ( ! ADC_THRESHOLD_UPPER_INT_IS_SET() )

/* TODO: ALL OTHER REGISTERS */

// TODO: make work for all registers
#define ADC_READ_VALUES()   ( ADC12MEM0 )





